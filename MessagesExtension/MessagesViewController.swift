//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Andrew Ogren on 9/19/17.
//  Copyright Â© 2017 Andrew Ogren. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    @IBOutlet weak var mainImageView: UIImageView!
    @IBOutlet weak var topImageView: UIImageView!
    
    private var mouseSwiped = false
    private var lastPoint: CGPoint?
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
    }
    
    
    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        mouseSwiped = false
        let touch = touches.first!
        lastPoint = touch.location(in: view)
    }
    
    override func touchesMoved(_ touches: Set<UITouch>, with event: UIEvent?) {
        mouseSwiped = true
        let touch = touches.first!
        let currentPoint = touch.location(in: view)
        UIGraphicsBeginImageContext(view.frame.size)
        topImageView.image?.draw(in: CGRect(x: 0, y: 0, width: view.frame.size.width, height: view.frame.size.height))
        UIGraphicsGetCurrentContext()?.move(to: lastPoint!)
        UIGraphicsGetCurrentContext()?.addLine(to: currentPoint)
        UIGraphicsGetCurrentContext()?.setLineCap(.round)
        UIGraphicsGetCurrentContext()?.setLineWidth(10)
        UIGraphicsGetCurrentContext()?.setStrokeColor(red: 0, green: 0, blue: 0, alpha: 1)
        UIGraphicsGetCurrentContext()?.setBlendMode(.normal)
        UIGraphicsGetCurrentContext()?.strokePath()
        topImageView.image = UIGraphicsGetImageFromCurrentImageContext()
        topImageView.alpha = 1
        UIGraphicsEndImageContext()
        
        lastPoint = currentPoint
    }
    
    override func touchesEnded(_ touches: Set<UITouch>, with event: UIEvent?) {
        if (!mouseSwiped) {
            UIGraphicsBeginImageContext(view.frame.size)
            topImageView.image?.draw(in: CGRect(x: 0, y: 0, width: view.frame.size.width, height: view.frame.size.height))
            UIGraphicsGetCurrentContext()?.setLineCap(.round)
            UIGraphicsGetCurrentContext()?.setLineWidth(10)
            UIGraphicsGetCurrentContext()?.setStrokeColor(red: 0, green: 0, blue: 0, alpha: 1)
            UIGraphicsGetCurrentContext()?.move(to: lastPoint!)
            UIGraphicsGetCurrentContext()?.addLine(to: lastPoint!)
            UIGraphicsGetCurrentContext()?.strokePath()
            topImageView.image = UIGraphicsGetImageFromCurrentImageContext()
            topImageView.alpha = 1
            UIGraphicsEndImageContext()
        }
        UIGraphicsBeginImageContext(mainImageView.frame.size)
        mainImageView.image?.draw(in: CGRect(x: 0, y: 0, width: view.frame.size.width, height: view.frame.size.height), blendMode: .normal, alpha: 1.0)
        topImageView.image?.draw(in: CGRect(x: 0, y: 0, width: view.frame.size.width, height: view.frame.size.height), blendMode: .normal, alpha: 1.0)
        mainImageView.image = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        topImageView.image = nil
    }
    
    
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
    }

}
